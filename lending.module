<?php

  /**
   * @file
   * Allows users to reserve and checkout nodes
   *
   */

define('LEND_ACCESS','access lending library'); // lendee
define('LEND_ADMIN','administer lending library'); // librarian

  /**
   * Implementation of hook_menu().
   */
function lending_menu() {
  $items['admin/settings/lending'] = array(
    'title' => 'Lending Library settings',
    'description' => 'Change how lending behaves.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lending_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'lending.admin.inc',
  );
  return $items;
}

/**
 * implementation of hook_perm()
 */
function lending_perm() {
  return array(LEND_ACCESS, LEND_ADMIN);
}


/**
* Implementation of hook_nodeapi().
*/
function lending_nodeapi(&$node, $op, $teaser, $page) {
  global $user;

  if (lending_not_user_or_admin($user)) {
    return;
  }

  if (lending_not_acceptable_type($node)) {
    return;
  }

  // page must be set otherwise this is a listing
  if (!$page) {
    return;
  }

  switch ($op) {
    // The 'view' operation means the node is about to be displayed.
    case 'view':
      lending_show_lending_panel(&$node);
      break;
  }
}

/**
 * Determine that this isn't a valid user to use this function.
 */

function lending_not_admin($user) {
  return ! (user_access(LEND_ADMIN, $user));
}

function lending_is_admin($user) {
  return (user_access(LEND_ADMIN, $user));
}

function lending_is_user_or_admin($user) {
  return (user_access(LEND_ACCESS, $user) or user_access(LEND_ADMIN, $user));
}

function lending_not_user_or_admin($user) {
  return ! (user_access(LEND_ACCESS, $user) or user_access(LEND_ADMIN, $user));
}

function lending_not_acceptable_type($node) {
  $types_to_lend = variable_get('lending_node_types', array());

  // Abort if this node is not one of the types we can lend
  return !in_array($node->type, $types_to_lend);
}

function lending_show_lending_panel(&$node) {
  // show_current_lender
  // show_lending_queue
  // show_lending_form
  lending_show_current_lender(&$node);

  if (lending_is_admin($user)) {
    lending_show_checkout_form(&$node);
  }
  lending_show_request_form(&$node);
}

function lending_show_current_lender(&$node) {
  global $user;

  $node->content['current_lender'] = array(
    '#value' => theme('lending_user', lending_checked_out_to($node->nid)),
    '#weight' => 8
  );
}

function lending_show_checkout_form(&$node) {
  if (! lending_is_checked_out($node->nid)) {
    $node->content['lending_checkoutform'] = array(
      '#value' => drupal_get_form('lending_checkoutform', $node),
      '#weight' => 9
    );
  }
}


function lending_show_request_form(&$node) {
  $node->content['lending_form'] = array(
    '#value' => drupal_get_form('lending_request_form', $node),
    '#weight' => 10
  );
}

/**
 * Required checkout functions
 *
 *  Check out an item, check in an item,
 *  Set up checkouts
 *
 */

function lending_checkout_item($nid, $uid, $librarian) {
  if (lending_is_checked_out($nid)) {
    // ERROR
    return;
  }
  return db_query("INSERT INTO {lending_checkouts} (nid, uid, created_lid, created_at) VALUES (%d, %d, %d, %d)", $nid, $uid, $librarian, time());

}

function lending_checkin_item($nid, $uid, $librarian) {
  if (! lending_is_checked_out($nid)) {
    // ERROR
    return;
  }
  return db_query("UPDATE {lending_checkouts} set returned_at = %d, returned_lid = %d where nid = %d AND uid = %d AND returned_at = 0", time(), $librarian, $nid, $uid);

}

function lending_checked_out_to($nid) {

  drupal_set_message(t('Nid is: ') . $nid);

  $result = db_query("SELECT uid from {lending_checkouts} where nid = %d and returned_at = 0", $nid);
  if ($user = db_fetch_array($result)) {
    drupal_set_message(t('User is: ') . $user['uid']);
    $u = user_load($user['uid']);
    drupal_set_message(t('Loaded user: ') . print_r($u, TRUE));
    return $u;
  }
  else {
    return 0;
  }
}

function lending_is_checked_out($nid) {
  $count = db_result(db_query("SELECT count(cid) from {lending_checkouts} where nid = %d and returned_at = 0", $nid));
  return ($count > 0);
}

/**
 * Define the form for entering an annotation.
 */
function lending_request_form($form_state, $node) {
  // Define a fieldset.
  $form['lending'] = array(
    '#type' => 'fieldset',
    '#title' => t('Reservations'),
  );
  // For convenience, save the node ID.
  $form['lending']['nid'] = array(
    '#type' => 'value',
    '#value' => $node->nid,
  );

  // For convenience, save the user ID.
  $form['lending']['uid'] = array(
    '#type' => 'value',
    '#value' => $user->uid,
  );

  // Define a submit function.
  $form['lending']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Request this Item'),
  );
  return $form;
}


/**
 *  Checkout form
 */

function lending_checkoutform($form_state, $node) {
  $form['user_name'] = array(
    '#title' => t('User Name'),
    '#type' => 'textfield',
    '#description' => t('The user id to check out for'),
    '#autocomplete_path' => 'user/autocomplete'
  );
  // For convenience, save the node ID.
  $form['nid'] = array(
    '#type' => 'value',
    '#value' => $node->nid,
  );


  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit')
  );

  return $form;
}

function lending_checkoutform_validate($form, &$form_state) {
  $params = array();
  $params['name'] = $form_state['values']['user_name'];
  $lendee = user_load($params);

  if (! $lendee) {
    form_set_error('user_name', t('User is not valid'));
    return;
  }

  if ( lending_not_user_or_admin($lendee) ) {
    form_set_error('user_name', t('User is not allowed to check out items'));
  }

  $form_state['values']['uid'] = $lendee->uid;

  if ( lending_is_checked_out($form_state['values']['user_name']) ) {
    form_set_error('submit', t('The item is checked out'));
  }
}

function lending_checkoutform_submit($form_id, $form_state) {
  global $user;

  $success = lending_checkout_item(
    $form_state['values']['nid'],
    $form_state['values']['uid'],
    $user->uid
  );

  if ($success) {
    drupal_set_message(t('Checkin completed'));
  } else {
    drupal_set_message(t('Checkin FAILED!'));
  }
}

function lending_theme() {
  $themes = array(
    'lending_user' => array(
      'arguements' => array('user' => 0)
    )
  );
  return $themes;
}

function theme_lending_user($user) {
  if (!$user) {
    return;
  }

  $output = '<div class="lending-current-lender">';
  $output .= 'Checked out by: ';
  $output .= $user->profile_fullname;
  $output .= '</div>';

  return $output;

}